name: Deployment of Terraform & Helm to staging or prod.

on:
  push: # We do CD when pushing
    branches:
     # - master
  
  workflow_dispatch:

# env:
#   AWS_REGION: ${{secrets.AWS_REGION}} # K8s Cluster Endpoint where your Terraform module to be published
#   AWS_ACCESS_KEY: ${{secrets.AWS_ACCESS_KEY}} # K8s Cluster Endpoint where your Terraform module to be published
#   AWS_SECRET_KEY: ${{secrets.AWS_SECRET_KEY}} # K8s Cluster Endpoint where your Terraform module to be published
#   AWS_SESSION_TOKEN: ${{secrets.AWS_SESSION_TOKEN}} # K8s Cluster Endpoint where your Terraform module to be published
#   AWS_PROFILE: ${{secrets.AWS_PROFILE}} # K8s Cluster Endpoint where your Terraform module to be published


jobs:
  deploy:
    name: Run terraform & helm
    #runs-on: [self-hosted, macOS]
    runs-on: ubuntu-latest

    
    concurrency: # Override previous deployment if we start a new one
      group: ${{ github.workflow }}-${{ github.ref }}-terraform
      cancel-in-progress: true

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        run: |
          terraform plan -no-color -input=false
            # -var aws-region=$AWS_REGION \
            # -var aws-access-key=$AWS_ACCESS_KEY \
            # -var aws-secret-key=$AWS_SECRET_KEY \
            # -var aws-token=$AWS_SESSION_TOKEN \
            # -var aws-profile=$AWS_PROFILE
        continue-on-error: true

      - uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            <details><summary>Show Plan</summary>
            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`
            </details>
            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        if: (github.ref == 'refs/heads/staging' || github.ref == 'refs/heads/main') && github.event_name == 'push'
        run: |
          terraform apply -auto-approve -input=false
            # -var aws-region=$AWS_REGION \
            # -var aws-access-key=$AWS_ACCESS_KEY \
            # -var aws-secret-key=$AWS_SECRET_KEY \
            # -var aws-token=$AWS_SESSION_TOKEN \
            # -var aws-profile=$AWS_PROFILE

      # - name: Helm upgrade
      #   if: (github.ref == 'refs/heads/staging' || github.ref == 'refs/heads/main') && github.event_name == 'push'
      #   run: |
      #     helm upgrade example ../../example -f values.yaml \
      #         --set api.postgres_instance_connection_name="$(terraform output -raw api_postgres_connection_name)" \
      #         --set worker.workerMemory="$(terraform output -raw worker_memory)" \
      #         --install